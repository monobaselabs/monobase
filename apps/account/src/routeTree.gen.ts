/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthAuthViewRouteImport } from './routes/auth/$authView'
import { Route as DashboardNotificationsRouteImport } from './routes/_dashboard/notifications'
import { Route as DashboardDashboardRouteImport } from './routes/_dashboard/dashboard'
import { Route as DashboardSettingsSecurityRouteImport } from './routes/_dashboard/settings/security'
import { Route as DashboardSettingsAccountRouteImport } from './routes/_dashboard/settings/account'

const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthViewRoute = AuthAuthViewRouteImport.update({
  id: '/auth/$authView',
  path: '/auth/$authView',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardNotificationsRoute = DashboardNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardDashboardRoute = DashboardDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingsSecurityRoute =
  DashboardSettingsSecurityRouteImport.update({
    id: '/settings/security',
    path: '/settings/security',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardSettingsAccountRoute =
  DashboardSettingsAccountRouteImport.update({
    id: '/settings/account',
    path: '/settings/account',
    getParentRoute: () => DashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/notifications': typeof DashboardNotificationsRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/settings/account': typeof DashboardSettingsAccountRoute
  '/settings/security': typeof DashboardSettingsSecurityRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardDashboardRoute
  '/notifications': typeof DashboardNotificationsRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/settings/account': typeof DashboardSettingsAccountRoute
  '/settings/security': typeof DashboardSettingsSecurityRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_dashboard/notifications': typeof DashboardNotificationsRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/_dashboard/settings/account': typeof DashboardSettingsAccountRoute
  '/_dashboard/settings/security': typeof DashboardSettingsSecurityRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/auth/$authView'
    | '/settings/account'
    | '/settings/security'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/auth/$authView'
    | '/settings/account'
    | '/settings/security'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/_dashboard/dashboard'
    | '/_dashboard/notifications'
    | '/auth/$authView'
    | '/_dashboard/settings/account'
    | '/_dashboard/settings/security'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthAuthViewRoute: typeof AuthAuthViewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$authView': {
      id: '/auth/$authView'
      path: '/auth/$authView'
      fullPath: '/auth/$authView'
      preLoaderRoute: typeof AuthAuthViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/notifications': {
      id: '/_dashboard/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof DashboardNotificationsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/settings/security': {
      id: '/_dashboard/settings/security'
      path: '/settings/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof DashboardSettingsSecurityRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/settings/account': {
      id: '/_dashboard/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof DashboardSettingsAccountRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardNotificationsRoute: typeof DashboardNotificationsRoute
  DashboardSettingsAccountRoute: typeof DashboardSettingsAccountRoute
  DashboardSettingsSecurityRoute: typeof DashboardSettingsSecurityRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardNotificationsRoute: DashboardNotificationsRoute,
  DashboardSettingsAccountRoute: DashboardSettingsAccountRoute,
  DashboardSettingsSecurityRoute: DashboardSettingsSecurityRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthAuthViewRoute: AuthAuthViewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
